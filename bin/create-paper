#!/usr/bin/env zsh
#
# Usage: `source create-paper`
#
# Must be run in a paper working directory.
# A variable `name` is required to be defined.
#
# Needs environment variables `FIGURE_SEARCH_DIRECTORIES` defined
# to collect figures and `BIBTEX_LIBRARY` to collect references.
#
# Uses PYTHONPATH variable to ensure that up-to-date python
# modules are used.
#
# Expects the following structure of paper directory:
#
# text/
#   includes.yaml     Defines figures and tables
#   abstract.md
#   figure-captions.md
#   key-points.md
#   title-block.tex
#   references.bib    *This will be rewritten if BIBTEX_LIBRARY is defined*
#   chapters/         Contains body text, which will be read in order
# paper-components/   (the path to the repository containing this script...can probably be improved)
# build/              (this will be created)
# collected-figures/  (this will be created)
# output/             (also will be created)
#

build='build'
defs="paper-components/defs"
body="$build/body.tex"
bibfile="text/references.bib"
texfile="$build/draft.tex"
figureDefs="text/includes.yaml"
captions="$build/figure-captions.tex"
abstract="$build/abstract.tex"
build_dest="$build/$name.pdf"
auxfile="${build_dest:r}.aux"
outfile="output/$name.pdf"
collect_dir="collected-figures"
preamble="$build/preamble.tex"
appendices="$build/appendices.tex"

source paper-components/defs.zsh

# Make sure we have the latest python modules
#(cd paper-components; git submodule update --init)
pip install -e paper-components/modules/* > /dev/null

# Check for required executables
echo "Checking for required executables..."
vv=(pandoc pandoc-crossref figurator bib-filter)
for c in $vv; do
  command -v $c >/dev/null 2>&1 || { echo >&2 "$c required but not installed"; exit 1 }
done

echo "Creating paper '$name' in directory $(pwd)"

mkdir -p $build $collect_dir output

rm -f $body $captions $abstract

# Collect figures into centralized directory
figurator collect \
  $figureDefs \
  $collect_dir \
  ${FIGURE_SEARCH_DIRECTORIES}

## Figure captions
cat text/figure-captions.md \
| text-pipeline \
> $captions

# Build abstract
cat text/abstract.md \
| text-pipeline \
> $abstract

echo "Processing body text"
# Process body text
aggregate-text text/chapters/*.md  \
| sed -r 's/^\\section\{(Introduction)\}/\\invisiblesection\{\1\}/g' \
| mark-inline-figures \
| text-pipeline \
| figurator inline \
  text/includes.yaml \
  --template-dir paper-components/includes \
  --captions $captions \
  --collect-dir $collect_dir \
> $body

## Title block
cp text/title-block.tex build/title-block.tex


cp $defs/draft.tex $texfile

# Copy preamble
cat "$defs/preamble"/*.tex > "$preamble"
# This needs to be abstracted because it
# is only for the `Orientation Statistics` paper.
if [[ -f text/math-defs.tex ]]; then
  cat text/math-defs.tex >> "$preamble"
fi

cat text/key-points.md \
| text-pipeline \
> build/key-points.tex

app_=text/appendices
a=($app_/*.md(N))
if [[ -d $app_ && ${#a} ]]; then
  echo "Processing appendices"
  aggregate-text ${a}  \
  | sed -r 's/^\\section\{(Introduction)\}/\\invisiblesection\{\1\}/g' \
  | mark-inline-figures \
  | text-pipeline \
  | figurator inline \
    text/includes.yaml \
    --template-dir paper-components/includes \
    --captions $captions \
    --collect-dir $collect_dir \
  > $appendices

  # Insert the appendix at the end of the standard template
  split=2
  head -n -$split $defs/draft.tex > $texfile
  cat $defs/appendix-shim.tex >> $texfile
  tail -n $split $defs/draft.tex >> $texfile

fi


echo "Running latex"
run-latex $texfile $build_dest #2>/dev/null

echo "Filtering bibliography"

# Filter bibliography
bib-filter --clean \
  --aux $auxfile $BIBTEX_LIBRARY $bibfile
# rebuild citations
bibtex $auxfile

echo "Running latex"
run-latex $texfile $build_dest
cp $build_dest $outfile

tag --set paper-draft $outfile

scale-images $outfile "${outfile:r}-sm.pdf" "printer" 2> /dev/null
